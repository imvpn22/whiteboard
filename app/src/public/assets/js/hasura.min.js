var hasura=function(){"use strict";!function(e){function t(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function r(e){return"string"!=typeof e&&(e=String(e)),e}function n(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return b.iterable&&(t[Symbol.iterator]=function(){return t}),t}function o(e){this.map={},e instanceof o?e.forEach(function(e,t){this.append(t,e)},this):Array.isArray(e)?e.forEach(function(e){this.append(e[0],e[1])},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}function s(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function i(e){return new Promise(function(t,r){e.onload=function(){t(e.result)},e.onerror=function(){r(e.error)}})}function a(e){var t=new FileReader,r=i(t);return t.readAsArrayBuffer(e),r}function u(e){var t=new FileReader,r=i(t);return t.readAsText(e),r}function h(e){for(var t=new Uint8Array(e),r=new Array(t.length),n=0;n<t.length;n++)r[n]=String.fromCharCode(t[n]);return r.join("")}function f(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function l(){return this.bodyUsed=!1,this._initBody=function(e){if(this._bodyInit=e,e)if("string"==typeof e)this._bodyText=e;else if(b.blob&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e;else if(b.formData&&FormData.prototype.isPrototypeOf(e))this._bodyFormData=e;else if(b.searchParams&&URLSearchParams.prototype.isPrototypeOf(e))this._bodyText=e.toString();else if(b.arrayBuffer&&b.blob&&w(e))this._bodyArrayBuffer=f(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!b.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(e)&&!g(e))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=f(e)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):b.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},b.blob&&(this.blob=function(){var e=s(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?s(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(a)}),this.text=function(){var e=s(this);if(e)return e;if(this._bodyBlob)return u(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(h(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},b.formData&&(this.formData=function(){return this.text().then(y)}),this.json=function(){return this.text().then(JSON.parse)},this}function c(e){var t=e.toUpperCase();return x.indexOf(t)>-1?t:e}function d(e,t){var r=(t=t||{}).body;if(e instanceof d){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new o(e.headers)),this.method=e.method,this.mode=e.mode,r||null==e._bodyInit||(r=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"omit",!t.headers&&this.headers||(this.headers=new o(t.headers)),this.method=c(t.method||this.method||"GET"),this.mode=t.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function y(e){var t=new FormData;return e.trim().split("&").forEach(function(e){if(e){var r=e.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");t.append(decodeURIComponent(n),decodeURIComponent(o))}}),t}function p(e){var t=new o;return e.split(/\r?\n/).forEach(function(e){var r=e.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();t.append(n,o)}}),t}function v(e,t){t||(t={}),this.type="default",this.status="status"in t?t.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new o(t.headers),this.url=t.url||"",this._initBody(e)}if(!e.fetch){var b={searchParams:"URLSearchParams"in e,iterable:"Symbol"in e&&"iterator"in Symbol,blob:"FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in e,arrayBuffer:"ArrayBuffer"in e};if(b.arrayBuffer)var m=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],w=function(e){return e&&DataView.prototype.isPrototypeOf(e)},g=ArrayBuffer.isView||function(e){return e&&m.indexOf(Object.prototype.toString.call(e))>-1};o.prototype.append=function(e,n){e=t(e),n=r(n);var o=this.map[e];this.map[e]=o?o+","+n:n},o.prototype.delete=function(e){delete this.map[t(e)]},o.prototype.get=function(e){return e=t(e),this.has(e)?this.map[e]:null},o.prototype.has=function(e){return this.map.hasOwnProperty(t(e))},o.prototype.set=function(e,n){this.map[t(e)]=r(n)},o.prototype.forEach=function(e,t){for(var r in this.map)this.map.hasOwnProperty(r)&&e.call(t,this.map[r],r,this)},o.prototype.keys=function(){var e=[];return this.forEach(function(t,r){e.push(r)}),n(e)},o.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t)}),n(e)},o.prototype.entries=function(){var e=[];return this.forEach(function(t,r){e.push([r,t])}),n(e)},b.iterable&&(o.prototype[Symbol.iterator]=o.prototype.entries);var x=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];d.prototype.clone=function(){return new d(this,{body:this._bodyInit})},l.call(d.prototype),l.call(v.prototype),v.prototype.clone=function(){return new v(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new o(this.headers),url:this.url})},v.error=function(){var e=new v(null,{status:0,statusText:""});return e.type="error",e};var _=[301,302,303,307,308];v.redirect=function(e,t){if(-1===_.indexOf(t))throw new RangeError("Invalid status code");return new v(null,{status:t,headers:{location:e}})},e.Headers=o,e.Request=d,e.Response=v,e.fetch=function(e,t){return new Promise(function(r,n){var o=new d(e,t),s=new XMLHttpRequest;s.onload=function(){var e={status:s.status,statusText:s.statusText,headers:p(s.getAllResponseHeaders()||"")};e.url="responseURL"in s?s.responseURL:e.headers.get("X-Request-URL");var t="response"in s?s.response:s.responseText;r(new v(t,e))},s.onerror=function(){n(new TypeError("Network request failed"))},s.ontimeout=function(){n(new TypeError("Network request failed"))},s.open(o.method,o.url,!0),"include"===o.credentials&&(s.withCredentials=!0),"responseType"in s&&b.blob&&(s.responseType="blob"),o.headers.forEach(function(e,t){s.setRequestHeader(t,e)}),s.send(void 0===o._bodyInit?null:o._bodyInit)})},e.fetch.polyfill=!0}}("undefined"!=typeof self?self:window);var e=function(e){console.error(e)},t=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},r=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o={"Content-Type":"application/json"},s=function(t,r){e(">>>"),e(t),e("<<<"),e(r)},i=function(){return 0},a=function(t,r,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:i;r.text().then(function(e){n(r.headers.get("Content-Type").indexOf("application/json")>-1?JSON.parse(e):e)},function(n){e("Successful response, but failed to read response: "),s(t,r),e(n),o()})},u=function(e){return function(t,r){return e.scheme+"://"+t+"."+e.baseDomain+r}},h=function(t,r){return function(h,f,l){var c=arguments.length>3&&void 0!==arguments[3]?arguments[3]:i;if(r.baseDomain){var d=n({},o,h.headers);t.token&&"anonymous"!==h.role&&(d.Authorization="Bearer "+t.token),h.role&&"anonymous"!==h.role&&(d["X-Hasura-Role"]=h.role);var y=u(r)(h.service,h.path);fetch(y,{method:h.method?h.method:"POST",headers:d,body:h.json?JSON.stringify(h.json):h.body?h.body:null}).then(function(t){t.status>=200&&t.status<300?a(h,t,f,c):t.status>=300&&t.status<400?(e("Redirect response received. Are you sure you're querying the right endpoint?"),s(h,t),a(h,t,l)):t.status>=400&&t.status<500?(e("Invalid request made (bad request):"),s(h,t),a(h,t,l)):t.status>500?(e("Server error:"),s(h,t),a(h,t,l)):(e("Unhandled error in Hasura SDK. Please file an issue at github.com/hasura/support with the information below:"),s(h,t),c())},function(t){e("Failed to make request. Check http/https, service name, base domain or path values used?\n>>>"),e(h),e("<<<"),e(t),c(t)})}else e("Please use hasura.setProject or hasura.setBaseDomain before making any API calls.")}},f=function(){return 0},l=function(){function o(e){t(this,o),this.hasura=e}return r(o,[{key:"signup",value:function(t,r,o){var s=this,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:f;if(this.hasura.user.token)e("A user session already exists. Use this.hasura.logout() first?");else{var a={username:this.hasura.user.username,password:t};this.hasura.user.email&&(a.email=this.hasura.user.email),this.hasura.user.mobile&&(a.mobile=this.hasura.user.mobile),this.hasura.fetch({service:"auth",path:"/signup",json:a},function(e){s.hasura.user=n({},s.hasura.user,{id:e.hasura_id,roles:e.hasura_roles}),e.auth_token&&(s.hasura.user.token=e.auth_token),s.hasura.saveUser(),o()},function(e){console.log(e),i()})}}},{key:"login",value:function(t,r){var o=this,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:f;this.hasura.user.token?e("A user session already exists. Use this.hasura.logout() first?"):this.hasura.fetch({service:"auth",path:"/login",json:{username:this.hasura.user.username,password:t}},function(e){o.hasura.user=n({},o.hasura.user,{id:e.hasura_id,roles:e.hasura_roles,token:e.auth_token}),o.hasura.saveUser(),r()},function(e){console.log(e),s()})}},{key:"logout",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:f;this.hasura.fetch({service:"auth",path:"/user/logout"},function(){t.hasura.clearUser(),e()},function(e){console.log(e),r()})}}]),o}(),c=function(){return 0},d=function(){function n(e){t(this,n),this.hasura=e}return r(n,[{key:"queryAsRole",value:function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:c;this.query(t,r,n,e)}},{key:"query",value:function(t,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:c,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,s={service:"data",path:"/v1/query",json:t};o&&(s.role=o),this.hasura.fetch(s,function(e){r(e)},function(t){e(t),n(t)})}},{key:"queryTemplateAsRole",value:function(e,t,r,n){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:c;this.queryTemplate(t,r,n,o,e)}},{key:"queryTemplate",value:function(t,r,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:c,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,i={service:"data",path:"/v1/template/"+t,json:r};s&&(i.role=s),this.hasura.fetch(i,function(e){n(e)},function(t){e(t),o(t)})}}]),n}(),y=function(){return 0},p=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)})},v=function(){function n(e){t(this,n),this.hasura=e}return r(n,[{key:"query",value:function(t,r,n){var o=t;this.hasura.fetch(o,function(e){r(e)},function(t){e(t),n(t)})}},{key:"upload",value:function(t,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:y,o=t.files[0];if(!o)return e("No file received from expected input[type=file] DOM element."),void e(t);var s={service:"filestore",path:"/v1/file/"+p(),headers:{"Content-Type":o.type},body:o};this.query(s,r,n)}},{key:"delete",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:y,n={service:"filestore",method:"DELETE",path:"/v1/file/"+e};this.query(n,t,r)}},{key:"download",value:function(e){var t=document.createElement("a");t.download=e,t.href=this.hasura.genUrl("filestore","/v1/file/"+e),t.click()}}]),n}(),b={username:"anonymous",id:0,roles:["anonymous"],token:null},m=window.localStorage;return new(function(){function e(){t(this,e);var r=m.getItem("hasura.user");this.user=r?JSON.parse(r):b,this.projectConfig={scheme:"https",baseDomain:null},this.resetFetch(),this.auth=new l(this),this.data=new d(this),this.file=new v(this)}return r(e,[{key:"resetFetch",value:function(){return this.fetch=h(this.user,this.projectConfig),this.genUrl=u(this.projectConfig),this}},{key:"setProject",value:function(e){return this.projectConfig.baseDomain=e+".hasura-app.io",this.resetFetch(),this}},{key:"setBaseDomain",value:function(e){return this.projectConfig.baseDomain=e,this.resetFetch(),this}},{key:"disableHttps",value:function(){this.projectConfig.scheme="http",this.resetFetch()}},{key:"setUsername",value:function(e){this.user.username=e,this.saveUser()}},{key:"setUserInfo",value:function(e){var t=this;this.user=n({},this.user,{id:e.hasura_id,roles:e.hasura_roles,token:e.auth_token}),["username","email","mobile"].map(function(r){t.user[r]=e[r]?e[r]:t.user[r]}),this.saveUser()}},{key:"saveUser",value:function(){m.setItem("hasura.user",JSON.stringify(this.user)),this.resetFetch()}},{key:"clearUser",value:function(){this.user=b,this.saveUser()}},{key:"clearSesssion",value:function(){this.clearUser()}}]),e}())}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
